// lib/app/product/ui/screens/add_ingredients_steps_screen.dart
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
// import 'package:uuid/uuid.dart'; // No longer needed if Supabase generates ID for 'id'
import '../../../../app/data/models/recipe.dart'; // <<< Updated import
import '../../../../app/routes/app_routes.dart'; // Import AppRoutes

class AddIngredientsStepsScreen extends StatefulWidget {
  final Map<String, dynamic> recipeInitialData;

  const AddIngredientsStepsScreen({super.key, required this.recipeInitialData});

  @override
  State<AddIngredientsStepsScreen> createState() => _AddIngredientsStepsScreenState();
}

class _AddIngredientsStepsScreenState extends State<AddIngredientsStepsScreen> {
  final _formKey = GlobalKey<FormState>();
  bool _isSaving = false;

  final List<TextEditingController> _ingredientNameControllers = [];
  final List<TextEditingController> _ingredientQuantityControllers = [];
  final List<TextEditingController> _directionControllers = [];

  @override
  void initState() {
    super.initState();
    _addIngredientField();
    _addDirectionField();
  }

  @override
  void dispose() {
    for (var controller in _ingredientNameControllers) {
      controller.dispose();
    }
    for (var controller in _ingredientQuantityControllers) {
      controller.dispose();
    }
    for (var controller in _directionControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  void _addIngredientField() {
    setState(() {
      _ingredientNameControllers.add(TextEditingController());
      _ingredientQuantityControllers.add(TextEditingController());
    });
  }

  void _removeIngredientField(int index) {
    setState(() {
      if (_ingredientNameControllers.length > 1) {
        _ingredientNameControllers[index].dispose();
        _ingredientNameControllers.removeAt(index);
        _ingredientQuantityControllers[index].dispose();
        _ingredientQuantityControllers.removeAt(index);
      } else {
        Get.snackbar('Cannot remove', 'At least one ingredient is required.',
            snackPosition: SnackPosition.BOTTOM, backgroundColor: Colors.orange, colorText: Colors.white);
      }
    });
  }

  void _addDirectionField() {
    setState(() {
      _directionControllers.add(TextEditingController());
    });
  }

  void _removeDirectionField(int index) {
    setState(() {
      if (_directionControllers.length > 1) {
        _directionControllers[index].dispose();
        _directionControllers.removeAt(index);
      } else {
        Get.snackbar('Cannot remove', 'At least one direction step is required.',
            snackPosition: SnackPosition.BOTTOM, backgroundColor: Colors.orange, colorText: Colors.white);
      }
    });
  }

  Future<void> _submitRecipe() async {
    if (_formKey.currentState!.validate()) {
      List<Ingredient> ingredients = [];
      for (int i = 0; i < _ingredientNameControllers.length; i++) {
        if (_ingredientNameControllers[i].text.isNotEmpty && _ingredientQuantityControllers[i].text.isNotEmpty) {
          ingredients.add(Ingredient(
            name: _ingredientNameControllers[i].text,
            quantity: _ingredientQuantityControllers[i].text,
          ));
        }
      }

      List<String> directions = [];
      for (var controller in _directionControllers) {
        if (controller.text.isNotEmpty) {
          directions.add(controller.text);
        }
      }

      if (ingredients.isEmpty) {
        Get.snackbar('Missing Ingredients', 'Please add at least one ingredient.',
            snackPosition: SnackPosition.BOTTOM, backgroundColor: Colors.red, colorText: Colors.white);
        return;
      }
      if (directions.isEmpty) {
        Get.snackbar('Missing Directions', 'Please add at least one direction step.',
            snackPosition: SnackPosition.BOTTOM, backgroundColor: Colors.red, colorText: Colors.white);
        return;
      }

      setState(() {
        _isSaving = true;
      });

      final supabase = Supabase.instance.client;
      final currentUserId = supabase.auth.currentUser?.id;

      if (currentUserId == null) {
        Get.snackbar('Error', 'You must be logged in to create a recipe.',
            snackPosition: SnackPosition.BOTTOM, backgroundColor: Colors.red, colorText: Colors.white);
        setState(() {
          _isSaving = false;
        });
        return;
      }

      // Prepare data for Supabase insertion, aligning with new Recipe model and DB columns
      final completeRecipeData = {
        // 'id' is automatically generated by Supabase (gen_random_uuid())
        'user_id': currentUserId,
        'name': widget.recipeInitialData['name'],
        'description': widget.recipeInitialData['description'],
        'cooking_time': widget.recipeInitialData['cookingTime'],
        'serving_size': widget.recipeInitialData['servingSize'],
        'category': widget.recipeInitialData['category'], // This is categoryName in model
        'category_id': widget.recipeInitialData['categoryId'], // New category_id
        'image_url': widget.recipeInitialData['imageUrl'],
        'author_name': widget.recipeInitialData['authorName'], // New author_name
        'author_avatar_url': widget.recipeInitialData['authorAvatarUrl'], // New author_avatar_url
        // 'created_at' will be set by Supabase database default value (now())
        'short_description': widget.recipeInitialData['shortDescription'], // New short_description
        'ingredients': ingredients.map((i) => i.toMap()).toList(),
        'directions': directions,
      };

      try {
        await supabase.from('recipes').insert(completeRecipeData);

        Get.snackbar(
          'Recipe Submitted!',
          'Recipe "${widget.recipeInitialData['name']}" saved successfully.',
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.green,
          colorText: Colors.white,
        );
//
        Get.offAllNamed('/home');

      } on PostgrestException catch (e) {
        Get.snackbar(
          'Submission Failed',
          'Database error: ${e.message}',
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.red,
          colorText: Colors.white,
        );
      } catch (e) {
        Get.snackbar(
          'Submission Failed',
          'An unexpected error occurred while saving your recipe: $e',
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.red,
          colorText: Colors.white,
        );
      } finally {
        setState(() {
          _isSaving = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Get.back(),
        ),
        title: const Text(
          'Add Ingredients & Steps',
          style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold),
        ),
        centerTitle: true,
        backgroundColor: Colors.white,
        elevation: 0,
      ),
      backgroundColor: Colors.white,
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildFormSectionHeader('Ingredients'),
              ListView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: _ingredientNameControllers.length,
                itemBuilder: (context, index) {
                  return Padding(
                    padding: const EdgeInsets.only(bottom: 10.0),
                    child: Row(
                      children: [
                        Expanded(
                          flex: 3,
                          child: _buildTextField(
                            controller: _ingredientNameControllers[index],
                            hintText: 'e.g., Chicken Breast',
                            labelText: 'Ingredient Name',
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Required';
                              }
                              return null;
                            },
                          ),
                        ),
                        const SizedBox(width: 10),
                        Expanded(
                          flex: 2,
                          child: _buildTextField(
                            controller: _ingredientQuantityControllers[index],
                            hintText: 'e.g., 200 g',
                            labelText: 'Quantity',
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Required';
                              }
                              return null;
                            },
                          ),
                        ),
                        if (_ingredientNameControllers.length > 1)
                          IconButton(
                            icon: const Icon(Icons.remove_circle_outline, color: Colors.red),
                            onPressed: () => _removeIngredientField(index),
                          ),
                      ],
                    ),
                  );
                },
              ),
              Align(
                alignment: Alignment.centerLeft,
                child: TextButton.icon(
                  onPressed: _addIngredientField,
                  icon: const Icon(Icons.add_circle_outline, color: Colors.black),
                  label: const Text('Add Ingredient', style: TextStyle(color: Colors.black)),
                ),
              ),
              const SizedBox(height: 30),

              _buildFormSectionHeader('Directions'),
              ListView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: _directionControllers.length,
                itemBuilder: (context, index) {
                  return Padding(
                    padding: const EdgeInsets.only(bottom: 10.0),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        CircleAvatar(
                          radius: 12,
                          backgroundColor: Colors.grey[300],
                          child: Text(
                            '${index + 1}',
                            style: const TextStyle(color: Colors.black, fontSize: 12),
                          ),
                        ),
                        const SizedBox(width: 10),
                        Expanded(
                          child: _buildTextField(
                            controller: _directionControllers[index],
                            hintText: 'Describe this step',
                            labelText: 'Step ${index + 1}',
                            maxLines: 3,
                            validator: (value) {
                              if (value == null || value.isEmpty) {
                                return 'Required';
                              }
                              return null;
                            },
                          ),
                        ),
                        if (_directionControllers.length > 1)
                          IconButton(
                            icon: const Icon(Icons.remove_circle_outline, color: Colors.red),
                            onPressed: () => _removeDirectionField(index),
                          ),
                      ],
                    ),
                  );
                },
              ),
              Align(
                alignment: Alignment.centerLeft,
                child: TextButton.icon(
                  onPressed: _addDirectionField,
                  icon: const Icon(Icons.add_circle_outline, color: Colors.black),
                  label: const Text('Add Step', style: TextStyle(color: Colors.black)),
                ),
              ),
              const SizedBox(height: 40),

              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _isSaving ? null : _submitRecipe,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF6B4EEF),
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 15),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  child: _isSaving
                      ? const SizedBox(
                      height: 20,
                      width: 20,
                      child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2))
                      : const Text('Submit Recipe', style: TextStyle(fontSize: 16)),
                ),
              ),
              const SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFormSectionHeader(String title) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 15.0, top: 10.0),
      child: Text(
        title,
        style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 20),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hintText,
    String? labelText,
    TextInputType keyboardType = TextInputType.text,
    int maxLines = 1,
    String? Function(String?)? validator,
  }) {
    return TextFormField(
      controller: controller,
      keyboardType: keyboardType,
      maxLines: maxLines,
      decoration: InputDecoration(
        hintText: hintText,
        labelText: labelText,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide.none,
        ),
        filled: true,
        fillColor: Colors.grey[100],
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
      ),
      validator: validator,
    );
  }
}